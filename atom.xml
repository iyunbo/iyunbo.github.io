<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iyunbo - design with code]]></title>
  <link href="http://iyunbo.github.io/atom.xml" rel="self"/>
  <link href="http://iyunbo.github.io/"/>
  <updated>2016-08-19T15:03:01+02:00</updated>
  <id>http://iyunbo.github.io/</id>
  <author>
    <name><![CDATA[Yunbo WANG]]></name>
    <email><![CDATA[iyunbo@iyunbo.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于ActivePivot的内存分析技术]]></title>
    <link href="http://iyunbo.github.io/BigData/In-Memory/2015/03/21/big-data-analytics-with-ActivePivot/"/>
    <updated>2015-03-21T12:12:00+01:00</updated>
    <id>http://iyunbo.github.io/BigData/In-Memory/2015/03/21/big-data-analytics-with-ActivePivot</id>
    <content type="html"><![CDATA[<h3>大数据时代来临</h3>

<p><img class="img-responsive" src="https://quartetfs.com/images/analytical-platform.png" alt="ActivePivot">
 数据分析如今已经成为企业议事日程中的首选项之一。“大数据” &ndash; 在这个被过度宣传的标语面前，管理者们正在竭尽全力的去抓住其中蕴含的无可限量的竞争优势，他们都绞尽脑汁的从运营数据中获取洞察力。
大数据所带来的变革性的影响正在挑战着传统的技术架构，这些结构已经被大部分公司使用了十多年。具体点讲，这种影响正在使得事务技术(Transactional)和分析技术(Analytical)之间的边界变得模糊，这就使得刻意的区分OLTP和OLAP系统显得不合适，尤其是在面对大型实时动态数据分析的时候。</p>

<h3>对速度的追逐</h3>

<p>如今，数据分析几乎不可避免的以速度为导向。这种对速度的需求可以细分为两种互相联系的要素：数据搜索速度和数据更新速度。要解决这两个要素中的任意一个，都不是一件简单的事情。 最终，这种需求将会孕育出一种混合型的数据管理系统，这种系统将同时满足快速的分析以及快速的更新这两方面需要。</p>

<!-- more -->


<p>近些年，一些在OLAP基础上进行的优化架构的探索已经被证明是徒劳的。 OLAP的设计初心是为用户最大限度的提供有用信息，然后，传统的OLAP往往不能适应用户多样性的需求，更无法满足“计算完成以后的变动”这个常见而具挑战的需求。现在的用户往往希望能以”探索”的形式与系统交互，而不是系统给出一些预先计算的结果。这种更直观的使用数据的方式大大增加了数据的运算量，事实上，由于分析维度的不断增加，数据量以及数据运算量将以几何级数的方式增加。这个结果，也就是所谓的“维度诅咒”，它将大幅度的降低系统效率。直观的看，似乎数据的搜索便利要建立在牺牲系统性能的基础上，或者反过来，系统的性能提升只能建立在牺牲数据搜索的便利性之上。</p>

<p>ROLAP和MOLAP是近些年来试图绕开”维度诅咒”的两个典型例子。其中MOLAP，即多维OLAP，主要原理是将数据存放到一个多维超立方体数据模型里并计算所有可能的不同维度之间的组合结果，这样MOLAP满足了数据搜索方面的速度要求，但是它完全无法满足数据更新速度的要求，因为它基于延时非常高的批量数据处理。另一方面，ROLAP，即关系型OLAP，是建立在传统关系型数据库上，这种情况下数据更新速度能够被满足，因为用户的每次查询都会让系统重新计算结果。然后数据的搜索速度将会大打折扣，尤其是当运算相当复杂的时候，搜索速度难以让人忍受。</p>

<h3>内存计算的崛起</h3>

<p>新兴的内存计算试图同时解决数据处理速度，和动态的提升搜索性能。与以往的技术不同，我们可以将以TB为单位的数据直接存如计算机的内存，这样就可以很快速的处理大量的数据。
这种新型的运算方式有几个好处：</p>

<ul>
<li>首先，目前内存的成本已经非常低廉。我们给系统配置的内存越多，系统的整体性能就越高。</li>
<li>其次，由于多核处理器的普及，实现基于内存的并行计算，数据压缩，索引优化都成为了可行的方案，这些方案都会大大提数据分析的效率。</li>
</ul>


<p>内存计算逐渐让人们看到打破“维度诅咒”的曙光。事实上，新兴的内存可视化解决方案已经声称确保在可接受的速度下提供无限的数据量搜索能力。然而，数据更新速度这一点还是没有得到妥善的解决，人们需要的是随时随地更新数据。其中最主要的原因是内存可视化技术不支持不同数据模型的混合运算。混合运算要求系统能够同时支持简短的事务性查询以及复杂数据量大的分析型查询。混合运算型数据库的一个显著优势就是它巧妙的抹去了数据从创造数据的事务环境转移到探索数据的分析环境之间的鸿沟。这样，用户终于可以实时的搜索随时随地更新的数据。</p>

<h3>ActivePivot</h3>

<p>ActivePivot由QuartetFS公司开发，这是一个混合性数据系统，它能够处理多维模型的搜索，同时支持实时数据更新，这就是一个奔着去解决两个速度要素的解决方案。目前，欧洲一些大型金融机构，例如花旗银行，法国新业银行，德国商业银行，瑞日信贷等，已经采用了这项技术作为它们新一代的数据分析工具。支持ActivePivot能够满足这么多用户需求的是几项核心设计：</p>

<ul>
<li>基于JAVA的内存管理系统</li>
<li>数据与计算在同一介质上，大大提升了运算速度</li>
<li>基于多核处理器的设计：充分利用硬件资源</li>
<li>列式存储机制：有效提升查询的性能</li>
<li>数据压缩技术节省了空间</li>
<li>Bitmap索引：同时具备节约空间和提升性能的优点</li>
<li>纵向与横向的可伸缩性</li>
<li>支持标准的多维查询语言MDX</li>
<li>完整数据可视化解决方案</li>
</ul>


<p>如果感兴趣，<a href="https://quartetfs.com/resource-center/case-studies">这里</a>可以找到相关的应用场景，其中包含技术文档的链接</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ship software faster with container]]></title>
    <link href="http://iyunbo.github.io/Linux/Virtualization/2014/06/14/ship-software-faster-with-container/"/>
    <updated>2014-06-14T19:10:00+02:00</updated>
    <id>http://iyunbo.github.io/Linux/Virtualization/2014/06/14/ship-software-faster-with-container</id>
    <content type="html"><![CDATA[<p><img class="img-responsive" src="http://www.docker.com/static/img/homepage/docker-whale-home-logo+.png" alt="Docker"></p>

<p>How many times we heared about &ldquo;But this works in my computer&rdquo;, &ldquo;We could never seen this in other environments&rdquo;, &ldquo;6 weeks spent just to makt sure it will work in production, but we can never be 100% sure &hellip;&rdquo;</p>

<p>If I am from IT department, I would pay a lot to stop these frustrating problems. The good news is that <a href="https://docker.io">Docker</a> made that possible. As it promises, Docker let you &ldquo;Develop, Ship and Run Any Application, Anywhere&rdquo;. The <a href="http://blog.docker.com/2014/06/its-here-docker-1-0/">stable official V1.0 of Docker is released on 2014/06/09</a>. From then, the world of virtualization step into the next generation: <strong>Containers</strong>.</p>

<!-- more -->


<h4>why containers are better</h4>

<p>So, what&rsquo;s the big diffrence between containers and virtual machines? In shord words, containers are more lightweighted. Containers are like &ldquo;processes&rdquo; and virtual machines are like, by definition,  &ldquo;machines&rdquo;. Obviously, machines have lots of software level overheads: operating system, drivers.</p>

<p><img src="http://www.programering.com/images/remote/ZnJvbT1vc2NoaW5hJnVybD1uQm5hdWNETXprVE01OFZPQk4zUWZOak00QWpOeDhTT3hJVE12TVRNd0l6TGxOV1l3TjNMelJXWXZ4R2MxOUNkbDVtTGg1V2FvTjJjdjV5WXBSWFkwTjNMdm9EYzBSSGE.jpg" alt="container vs vm" class="img-responsive"></p>

<p>As this picture shows, virtual machines are managed by <a href="http://en.wikipedia.org/wiki/Hypervisor">Hypervisor</a>, which runs different operating systems, each of them is isolated form others. We call this OS isolation. On the other hand, containers are managed by container engine (Docker), which runs different applications, each application is not aware of others. This is called process isolation. The idea here is that our actual need is applications not the operating system, so just providing the necessary context for each process running upon one operating system other than running multiple operating systems saves a lot of computer resouces. It only tackes seconds to start a container and the application is already running. How much time it takes to start an operating system and all the initial services?</p>

<h4>what containers cannot do</h4>

<p>Of cause, containers have drawbacks, as we know containers run on one operating system, for example Docker containers run on Linux. It is not possible to run Windows application on a Linux container. So containers are OS dependent.</p>

<h4>what Docker offers</h4>

<blockquote><p>Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications. Consisting of Docker Engine, a portable, lightweight runtime and packaging tool, and Docker Hub, a cloud service for sharing applications and automating workflows, Docker enables apps to be quickly assembled from components and eliminates the friction between development, QA, and production environments. As a result, IT can ship faster and run the same app, unchanged, on laptops, data center VMs, and any cloud.</p>

<p><em>www.docker.com</em></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[recommended programming courses from Cousera]]></title>
    <link href="http://iyunbo.github.io/2014/06/13/recommended-programming-courses-from-cousera/"/>
    <updated>2014-06-13T23:00:00+02:00</updated>
    <id>http://iyunbo.github.io/2014/06/13/recommended-programming-courses-from-cousera</id>
    <content type="html"><![CDATA[<p><img class="img-rounded img-responsive" src="https://www.coursera.org//maestro/api/course/971469/logo"></img></p>

<blockquote><p><a href="https://www.coursera.org">Coursera</a> is an education platform that partners with top universities and organizations worldwide, to offer courses online for anyone to take, for free.</p>

<p><em>www.coursera.org</em></p></blockquote>

<!-- more -->


<hr />

<ul>
<li><p><a href="https://class.coursera.org/algo-005/lecture">Algorithms: Design and Analysis, Part 1</a></p></li>
<li><p><a href="https://www.coursera.org/course/algs4partII">Algorithms: Design and Analysis, Part 2</a></p></li>
<li><p><a href="https://class.coursera.org/reactive-001/lecture">Principles of Reactive Programming</a></p></li>
</ul>


<p>By the way, Coursera is a great place to learn, everything.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Git Efficiently]]></title>
    <link href="http://iyunbo.github.io/Linux/2013/05/18/using-git-efficiently/"/>
    <updated>2013-05-18T13:00:00+02:00</updated>
    <id>http://iyunbo.github.io/Linux/2013/05/18/using-git-efficiently</id>
    <content type="html"><![CDATA[<p><img src="http://iyunbo.github.io/images/posts/git.jpg" class="img-responsive" alt="Git branching"></p>

<p>Git is a free and open source distributed version control system. Git is designed very differently from tranditional version control system like Subversion (SVN). It may confuse a SVN user at first. In oder to benefit Git&rsquo;s effeciency and speed, it&rsquo;s really important to uderstand it and use it wisely. This article is not a &ldquo;getting started&rdquo; tutorial neither a deep discussion of Git, but will provide relevant tips, references, links to help professionals understanding and using Git for their daily work. I suppose that you, my dear reader, have already the basic undersatding on version control system such as <a href="http://subversion.tigris.org/" title="SVN">SVN</a> or <a href="http://cvs.nongnu.org/" title="CVS">CVS</a>.</p>

<!--more-->


<h3>Uderstanding Git</h3>

<p>first of all, make sure those basics are clearly understood:</p>

<ul>
<li>Git is distrubuted, you have everything the server has</li>
<li>Git is a story of snapshorts not deltas</li>
<li>Think Git as a filesystem</li>
<li>Git is fast because it works locally most of the time</li>
<li>3 states: committed, modified, and staged</li>
<li>GIT use SHA-1 algorithm to hash cryptographically its contents</li>
</ul>


<p>This <a href="http://git-scm.com/book/en/Getting-Started" title="Git basics">&ldquo;getting started&rdquo; documentation</a> explains very well these basics in a simple way. Understanding the differences between Git and SVN in the first place is vital because this is where mistakes often happen. <a href="http://boxysystems.com/index.php/5-fundamental-differences-between-git-svn/" title="Differences between Git &amp; SVN">This article</a> explains very briefly the fundamental differences between the two systems.</p>

<p>Now, let&rsquo;s try Git. If you haven&rsquo;t installed Git yet, here are links for <a href="http://git-scm.com/book/en/Getting-Started-Installing-Git" title="Installing Git">installing</a> and <a href="http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup" title="Git first time Setup">setup</a>.</p>

<h3>Working with Git</h3>

<p><a href="http://git-scm.com/book/en/Git-Basics" title="Git Basic Commands">This documentation</a> explains very well the basic daily work commands. There is no need to say more, I just sum up the most used commands as following:</p>

<ul>
<li>Recording changes to the repository</li>
</ul>


<p>gist 5605116 git_recording_changes.sh</p>

<ul>
<li>Viewing commits history</li>
</ul>


<p> gist 5605116 git_log.sh</p>

<ul>
<li>Commit message model</li>
</ul>


<p>gist 5605116 git_commit_message.txt</p>

<ul>
<li>Undoing Things</li>
</ul>


<p>gist 5605116 git_undoing.sh</p>

<p><strong>Be careful, because you can’t always revert some of these undos. This is one of the few areas in Git where you may lose some work if you do it wrong.</strong>
Anything that is committed in Git can always be recovered. Even commits that were on branches that were deleted or commits that were overwritten with an &mdash;amend commit can be recovered.  However, anything you lose that was never committed is likely never to be seen again. It&rsquo;s good practice to commit things regularly.</p>

<ul>
<li>Working with Remotes</li>
</ul>


<p>gist 5605116 git_remote.sh</p>

<ul>
<li>Making Git easier</li>
</ul>


<p>Here is a BASH script to make Git experience simpler, easier and familiar.</p>

<p>gist 5605116 git_easier.sh</p>

<h3>Branching with Git</h3>

<p>Branching is the &ldquo;killer feature&rdquo; in Git, it changes the way we develop. I still remember how painful to manager a branch with SVN. But with Git, it&rsquo;s so lightweight that swiching between branches is almost instantaneous. You can read <a href="http://git-scm.com/book/en/Git-Branching" title="Git branching">this documentation</a> to know about Git branching. I list out just some important tips:</p>

<ul>
<li>Understand what branch is in Git is most essential, <a href="http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is" title="Git Branching">this documentation</a> helps you understand it very well</li>
<li>Branch &amp; Merge are day-to-day tasks, here is a basic story to show how these things are done</li>
</ul>


<p>gist 5605116 git_branch_story.sh</p>

<ul>
<li>The above example just shows a simple use case, however the real life work are more complicated and branches are managed by different levels of stability especially when dealing with large projects.</li>
</ul>


<p><img src="http://iyunbo.github.io/images/posts/git_branch_workflow.png" class="img-responsive" alt="Git branching"></p>

<p>In Git it’s common to create, work on, merge, and delete branches several times a day. Comparing to SVN, branches are largely used and encouraged in Git giving its effeciency and simplicity. Remember all those merge, branch operations are managed loacally, no server communication is happening.</p>

<ul>
<li>See <a href="http://git-scm.com/book/en/Git-Branching-Remote-Branches" title="Git Remote Branching">this documentation</a> for Remote Branches management</li>
<li>And <a href="http://git-scm.com/book/en/Git-Branching-Rebasing" title="Git Rebasing">this documentation</a> for Rebasing.</li>
</ul>


<p>Rebasing results in changes as the merge, but offers a cleaner commit history. The following commands are often used when dealing with rebasing.</p>

<p>gist 5605116 git_rebasing.sh</p>

<p><strong>NEVER, never, never rebase commits that you have pushed to a public repository. This could generate a lot of useless work for everybody of your team</strong></p>

<h3>More</h3>

<p>At this point, you should be confortable with Git basic commands and concepts, but for working on real projects, you still need define a workflow model and some rules for your team, here is a list of very good guidelines and practical recommandations:</p>

<ul>
<li><a href="http://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project" title="Projects Workflows">Common project workflows</a></li>
<li><a href="http://stackoverflow.com/a/7589612/644774" title="Tips for merging">Tips for merging</a></li>
<li>The book: <a href="http://git-scm.com/book/en" title="Pro Git">Pro Git</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gemini Architecture]]></title>
    <link href="http://iyunbo.github.io/Project/Web/2013/05/16/gemini/"/>
    <updated>2013-05-16T00:11:00+02:00</updated>
    <id>http://iyunbo.github.io/Project/Web/2013/05/16/gemini</id>
    <content type="html"><![CDATA[<p>Gemini是一个基于移动互联网络的交互式游戏。本文从技术层面来阐述Gemini的构架，分为物理构架和应用构架。Gemini的一大特性是利用Google App Engine Cloud Platform（以下称为GAE）作为底层的平台支持。</p>

<h3>物理构架</h3>

<p><img src="http://iyunbo.github.io/images/projects/gemini-architecture-infrastructure.jpg" class="img-responsive" alt="Infrastructure"></p>

<!--more-->


<p>上图为物理构架，我们可以明显的看到这样一个构架是如此的简单，主要原因是其中复杂的结构和技术实现已经被GAE的服务接口所隐藏。GAE的具体形式是PaaS（Platform as a Service），因此Gemini
的物理构架实际上被完全虚拟化，换句话说，Gemini物理上没有任何部件，云端所提供的所有服务均视为外部环境，客户端浏览器和移动端应用均为软件实体，物理实体本身不属于Gemini的部件，而是用户自己的设备。当然GAE云的环境还需要一定的配置和管理，不过这项工作由于有<a href="https://appengine.google.com/" title="GAE Admin console">GAE控制面板</a>的存在而变得非常轻松。</p>

<p>在这个虚拟物理构架下，Gemini由服务端应用和移动端应用构成，值得一提的是PC端网页应用由服务器端应用直接提供，浏览器只是用户自带的软件实体，也不属于Gemini组成部件。</p>

<p>客户端和服务器端之间的交互通过标准的HTTP/HTTPS协议来实现，Gemini与GAE所提供的服务之间通过GAE SDK给出的API接口进行交互。</p>

<h3>应用构架</h3>

<p>下图为应用构架：</p>

<p><img src="http://iyunbo.github.io/images/projects/gemini-architecture-application.jpg" class="img-responsive" alt="Application Architecture"></p>

<p>由于有了完善的云端支持，Gemini应用构架完全建立在GAE提供的物理支持和各种软件服务之上。Gemini服务器端应用应该趋向于结构的简化和服务的重用，这个应用构架的总体设计要点是：</p>

<ul>
<li>绝不自主实现已经存在或者Google提供的服务</li>
<li>尽可能利用现有的GAE服务和API接口</li>
<li>可伸缩性（Scalability）是技术层面的一大目标，这个特性的成功与否决定了产品的性能和未来发展空间，从而直接影响用户体验</li>
<li>服务器与客户端接口采用REST架构，实现HTML和JSON格式，充分发挥服务的易用性和开放性，以支持移动网络应用的各种需求</li>
<li>只使用Google提供的数据访问接口，避免引入第三方框架或API</li>
<li>数据层的设计以性能优先，其次考虑可靠性</li>
<li>实现与微信平台的集成，充分利用微信的用户关系和平台服务</li>
</ul>


<p>不难看出，服务器端应用是Gemini的核心，这个构架的搭建和技术实现至关重要，在保证功能完整的前提下，服务器端程序设计遵守以下规则：</p>

<ul>
<li>始终以性能优先</li>
<li>尽可能保证功能的完善和优化，在无法保证性能的矛盾情况下，可以考虑重新设计功能</li>
<li>在功能和性能都能保证的情况下，完善代码的可维护性</li>
<li>接口的设计，以通用性为前提，避免选用看似流行或者有趣的新兴技术</li>
<li>API的实现以移动端为主，网页为次</li>
<li>确保服务器应用的多线程安全性（thread safe）</li>
<li>数据是应用的能源，数据访问，尤其是数据读取，务必要保证性能和一致性</li>
</ul>


<p>此外，移动端应用也是Gemini的一大重心，与服务器端不同，移动端应用更注重用户界面设计，然而用户体验仍然是重中之重，性能与界面美观要同时考虑，缺一不可。因此，移动端的功能设计需要仔细考量界面的友好性和性能的优化。Gemini移动端应用设计有以下特性：</p>

<ul>
<li>游戏界面简单有趣，采用扁平式设计</li>
<li>界面回应速度快，避免一切无回应状态</li>
<li>界面友好，适应不同大小的触屏</li>
<li>移动应用无数据处理，无复杂算法，无冗余或低性能API调用</li>
</ul>


<h3>开发技术</h3>

<table class="info_table">
  <tbody>
  <tr>
    <th>项目</th>
    <th>技术</th>
    <th>版本</th>
  </tr>
  <tr>
    <td>主程序语言</td>
    <td><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank">JAVA</a></td>
    <td>7</td>
  </tr>
  <tr>
    <td>服务器端编程环境</td>
    <td><a href="https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Java" target="_blank">Google App Engine SDK for Java</a></td>
    <td>1.8</td>
  </tr>
  <tr>
    <td>Web客户编程环境</td>
    <td><a href="http://www.w3schools.com/html/html5_intro.asp" target="_blank">HTML</a></td>
    <td>5</td>
  </tr>
  <tr>
    <td>移动端编程环境</td>
    <td><a href="http://developer.android.com/sdk/index.html" target="_blank">Android SDK</a></td>
    <td>4.2, 目标兼容1.6以上，使用<a href="http://developer.android.com/tools/extras/support-library.html" target="_blank">支持库</a>以支持尽量多的移动设备</td>
  </tr>
  <tr>
    <td>集成开发环境</td>
    <td>不限。推荐<a href="http://www.eclipse.org/downloads/" target="_blank">Eclipse</a>, <a href="http://www.jetbrains.com/idea/download/index.html" target="_blank">IntelliJ IDEA</td>
    <td>最新</td>
  </tr>
  <tr>
    <td>内容管理系统</td>
    <td><a href="http://git-scm.com/" target="_blank">GIT</a></td>
    <td>1.8以上</td>
  </tr>
  </tbody>
</table>


<br/>


<h3>版本</h3>

<p>Gemini版本计划大致如下：</p>

<ul>
<li>V0：原型阶段，重点开发服务器端应用，提供简单的移动端界面，设计重心是服务器的性能和可伸缩性，功能从简</li>
<li>V1：第一版本，设计完整和精巧的移动端界面，完善游戏，以游戏的趣味性为重心，同时保证服务器端的性能，这一阶段将是服务器应用和移动端应用的主要开发过程</li>
<li>V2：升级版本，扩大服务器端的数据吞吐量，优化服务器应用和移动应用的性能，尽量少的改动游戏功能，重心放在游戏推广和优化上</li>
<li>V3：成熟版本，重心放在商业化和产品价值提高上</li>
</ul>


<h3>总结</h3>

<p>进入云时代的互联网为我们提供了更多的机遇和可能性，对云的使用不是一种赶潮流的冲动，而是一种优化成本，简化流程的解决方案。像Gemini这样的移动互联网应用，将以有趣的游戏和完善的用户体验来吸引挑剔的玩家。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimize the look with Solarized]]></title>
    <link href="http://iyunbo.github.io/Web/2013/05/11/optimize-the-look-with-solarized/"/>
    <updated>2013-05-11T01:24:00+02:00</updated>
    <id>http://iyunbo.github.io/Web/2013/05/11/optimize-the-look-with-solarized</id>
    <content type="html"><![CDATA[<p><img src="http://iyunbo.github.io/images/posts/solarized_yinyang.jpg" class="img-responsive" alt="Solarized project "></p>

<p>Web developpers or Apps developpers, IHM designers or Graphists how much time have you spent choosing the perfect color of your works?</p>

<!--more-->


<p>Spending more and more time in front of screens, we care so much ( at least we should care ) about the relation between our eyes and applications. I believe most people have some of those experiences:
under a big tree on a sunny summer day, the shaded paper contrasts with the crisp text nicely; Some black white website from a computer display tires the eye; Some application
drives you crazzy with those confusing colors&hellip;
How colors affect the look? What&rsquo;s the right color for display? What&rsquo;s the optimized color set for my application?
Those are subjects related to tons of studies. Many projects have been developped to make our eyes more confortable.</p>

<p><a href="http://ethanschoonover.com/solarized" title="Solarized">Project Solarized</a> is a sixteen color palette (eight monotones, eight accent colors) designed for use with terminal and gui applications. This colorscheme is designed with both precise <a href="http://en.wikipedia.org/wiki/Lab_color_space" title="CIELAB">CIELAB</a> lightness relationships and a refined set of hues based on fixed color wheel relationships. For short it&rsquo;s human vision compliant. The project website itself is a demenstration.
The author and other contributors still work on &ldquo;Solarizing&rdquo; many applications, <a href="http://ethanschoonover.com/solarized#editors-ides" title="Solarized applications">check it</a> out if your faverite editors or IDEs are already Solarized.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress makes blogging enjoyable]]></title>
    <link href="http://iyunbo.github.io/Web/Ruby/2013/05/08/octopress/"/>
    <updated>2013-05-08T13:07:00+02:00</updated>
    <id>http://iyunbo.github.io/Web/Ruby/2013/05/08/octopress</id>
    <content type="html"><![CDATA[<p><img src="http://iyunbo.github.io/images/posts/octopress_logo.png " class="img-responsive" alt="Octo is pressing!"></p>

<p><a href="http://octopress.org/" title="Octopress">Octopress</a> is a framework designed for Jekyll, the static blogging engine powering Github Pages.
Thanks to Octopress, code blogging is easy and beautiful.
I like the way how Octopress is documented: simple and useful.
Make sure to spend 30 minutes checking them out before using it: <a href="http://octopress.org/docs" title="Octopress Documentation">Octopress Documentation</a>.</p>

<!--more-->


<p>As <a href="https://github.com/imathis" title="Brandon Mathis">Brandon Mathis</a> stressed, Octopress is a blogging framework for hackers. But don&rsquo;t think of Octopress as something extraordinary and complex.
At least, you should be comfortable running shell commands and familiar with the basics of Git.
How to know if it&rsquo;s the right tool for you? Just feel the joy then it&rsquo;s perfect for you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of Test Driven Development (TDD)]]></title>
    <link href="http://iyunbo.github.io/J2EE/2011/02/28/principles-of-test-driven-development-tdd/"/>
    <updated>2011-02-28T00:00:00+01:00</updated>
    <id>http://iyunbo.github.io/J2EE/2011/02/28/principles-of-test-driven-development-tdd</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Test-driven_development" title="TTD">TDD</a> is a great method in software design.
Traditionally, the process of TDD consists of the following steps:
1. Always write a unit test before everything else and of course il will fail
1. Write some code to pass the test, the code can be inelegant
1. Refactor the code
1. Repeat all above</p>

<p><img src="http://iyunbo.github.io/images/posts/tdd_flow.png" class="img-responsive" alt="A quick overview of the Test-driven development"></p>

<p>Test-driven does not simply verify the correctness of the code but more important it <strong>drives the design</strong>.</p>

<!--more-->


<p>Here are the great principles :</p>

<ul>
<li><strong>Write test before the implementation</strong>. This ensures in this way that all written code is covered by at least one test. This gives the programming team, and subsequent users, a greater level of confidence in the code.</li>
<li><strong>A Contract Design Pattern</strong>. The programmer is concerned with interface before implementation. It approaches the code through usage rather than assumptions and preconceptions.</li>
<li><strong>Take small steps when required</strong>. It allows a programmer to focus on the task at hand as the first goal is to make the test pass.</li>
<li><strong>The test is a form of specs</strong>, this drives programmer to understand the specs before all because she will have to translate it into test code later. Tests are not specs, of course not, but a test should meet the specs in some way.</li>
<li><strong>Test is the first level design</strong>. When we write a unit test, we begin to divide a feature into parts. The more test is simple and clear, the more code is going to be clear and simple.</li>
</ul>


<p>Besides theses principles, in practice, the pure TDD shows some issues and inefficiency :</p>

<ul>
<li>Tests are not real software code, there is a risk of losing productivity because of too much test code written. This is not exactly a TDD issue but a design issue, if the test code is complex this means probably the implementation does too much work and should be divided into subsets.</li>
<li>In the step 2, we are intended to write code just for passing the test without consideration of code quality and we achieve this by refactoring later. That indicates we will always rework our code. Personally, I don&rsquo;t like it. And refactoring may violate the original idea of TDD : design before coding, but refactoring here just seems like some mechanic cleaning job. Can&rsquo;t we write good quality code in the first place using all OO design principles and code conventions? Once done, the code should be reliable and maintainable.</li>
<li>Write test before implementation, it sounds very strange, how can we run a test without any implementation code? How we compile the test if the feature class is not yet written, but if the class is created even with just a skeleton, does this mean we write something else before the test and this is not test-driven.</li>
</ul>


<p>In daily work, the TDD is not easy to apply at first because it appears to add some extra work and it changes the regular habits of programming, and some or all of the above issues are not well concerned. That&rsquo;s why some people failed and blamed TDD as an anti-productivity method. My goal here is to make this fantastic method not hard to apply and really productive.</p>

<p>I will show in another blog how in detail these issues can be resolved and the code could be written in a J2EE project by using good practice and appropriate tools. Here I want to underline some guidelines of using the TDD method:</p>

<ul>
<li><strong>TDD is about design not about test</strong>. Use the test code to design not just to verify the correctness. Yes we write some extra code than we needed for the feature of the software, but this code is valuable : it&rsquo;s a validation, it&rsquo;s a design and it can even be a spec document.</li>
<li><strong>Test is for requirement not for implementation</strong>. Let the test guide the implementation. We build the contract first, then we implement it.</li>
<li><strong>Keep it simple and clear</strong>. A test or an interface is written for one requirement not some requirements. A technic to verify about this is by asking what does it test or what does it do? The answer should not contain the word &ldquo;and&rdquo;.</li>
<li><strong>Test before program or interface before implementation</strong>. Stick to it, this is the &ldquo;top down&rdquo; principle. Think and define the contract before realize it.  Ask yourself before writing any code : what does it do? What does it expect? What are the rules?</li>
<li><strong>TDD is one method and mustn&rsquo;t ignore other OO design principles</strong>. Good practice, code convention, design patterns are encouraged to use other than ignored while applying the method.</li>
<li><strong>TDD is a tool, use it do not suffer it</strong>. A tool helps you, not slow you down, if the method drives you crazy, there must be something wrong, don&rsquo;t ignore it, find it and try to manage it in an easier way.</li>
</ul>


<h3>References</h3>

<hr />

<p>You can find some good examples regarding TDD on the net:</p>

<ul>
<li>An other nice introduction on TDD with a PHP Demonstration</li>
</ul>


<p><a href="http://diogoosorio.com/blog/entry/test-driven-development-tdd-using-phpunit" title="TDD with PHP"><img src="http://diogoosorio.com/public/images/blog/f8ad5ba0677204b012aa267f739b2f92.jpg" class="img-responsive" alt="TDD on PHP"></a></p>

<ul>
<li>An excellent demenstration of TDD on JAVA practice</li>
</ul>


<center><iframe src="http://player.vimeo.com/video/10569751" width="500" height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></center>


<ul>
<li>A nice book of TDD: Test Driven Development: By Example, <a href="http://en.wikipedia.org/wiki/Kent_Beck" title="Kent Beck">Kent Beck</a>, <a href="http://en.wikipedia.org/wiki/Addison-Wesley_Longman" title="Addison-Wesley Longman">Addison-Wesley Longman</a>, 2002, ISBN 0-321-14653-0, ISBN 978-0321146533</li>
</ul>


<p>Wish you enjoined it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle installation (10g+)]]></title>
    <link href="http://iyunbo.github.io/Oracle/Linux/2011/02/27/oracle-installation-10g/"/>
    <updated>2011-02-27T00:00:00+01:00</updated>
    <id>http://iyunbo.github.io/Oracle/Linux/2011/02/27/oracle-installation-10g</id>
    <content type="html"><![CDATA[<p><img src="http://iyunbo.github.io/images/posts/oraclesw.jpg" class="img-responsive" alt="Oracle"></p>

<p><a href="http://www.oracle.com/" title="Oracle">Oracle</a> database installation is not simple procedure. And it may take hours even days if something goes wrong.
Here are some useful tutorial links and explanations. Hopefully with these instructions, installing oracle database is no longer or less painful.</p>

<!--more-->


<ul>
<li><strong>10g Express</strong></li>
</ul>


<p>Oracle 10g XE is a free version for development, deployment and distribution. The installation instructions are easy to follow:</p>

<p><a href="https://help.ubuntu.com/community/Oracle" title="Oracle 10g XE on Ubuntu">How to install Oracle 10g XE on Ubuntu</a></p>

<p><a href="http://www.ubuntugeek.com/how-to-install-oracle-10g-xe-in-64-bit-ubuntu.html" title="Oracle 10g XE 64bit on Ubuntu">How to install Oracle 10g XE on 64-bit Ubuntu</a></p>

<ul>
<li><strong>10g</strong></li>
</ul>


<p>Unlike XE version, the standard one is much harder to install, here is a very helpful guide:</p>

<p><a href="http://www.akadia.com/services/ora_linux_install_10g.html" title="Oracle 10g on Linux">How to install Oracle 10g on Linux</a></p>

<ul>
<li><strong>11g</strong></li>
</ul>


<p>11g is by the time of this blog the latest released version, finding an installation guide should not be difficult with google. This is a good tutorial that I have tested and worked.</p>

<p><a href="http://forums.oracle.com/forums/thread.jspa?threadID=1115155&amp;amp;tstart=0" title="Oracle 11g on Ubuntu">How to install Oracle 11g on Ubuntu</a></p>

<ul>
<li><strong>Startup the database</strong></li>
</ul>


<p>The following commands work only for user oracle, or the DBA user name you have created when you installed the database, oracle is the default DBA user name.
To start the database after installation, first of all there are few things to check:</p>

<p> gist 5555490 check_oracle_env.sh</p>

<p>verify if the value corresponds to your database settings</p>

<p>Now we can go</p>

<p> gist 5555490 start_oracle.sh</p>

<p>and by then you should see that the database has been started successfully.
The job may not be finished yet, your should check if the listener is active :</p>

<p> gist 5555490 start_lsnr.sh</p>

<p>if the listener is already started, it will do nothing.
We can now test the database connection:</p>

<p> gist 5555490 test_connection.sh</p>

<ul>
<li><p><strong>Tips</strong></p>

<ol>
<li> LRM-00109: could not open parameter file, <a href="http://www.dba-oracle.com/bk_lrm_00109_could_not_open_parameter_file_string.htm" title="LRM-00109">here</a> is the expert&rsquo;s explanation and solution.</li>
<li> Connect from a X-Windows enabled terminal with trusted X11 forwarding: > ssh -X oracle@server_hostname_or_ip</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apps]]></title>
    <link href="http://iyunbo.github.io/2009/01/07/apps/"/>
    <updated>2009-01-07T12:00:00+01:00</updated>
    <id>http://iyunbo.github.io/2009/01/07/apps</id>
    <content type="html"><![CDATA[<p>Apps created by iyunbo.org</p>

<!--more-->


<ul>
<li>iTaskEngine: a handful web page based task manager</li>
</ul>

]]></content>
  </entry>
  
</feed>
